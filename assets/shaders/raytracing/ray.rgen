#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "resources.h"
#include "../sampling.h"

layout(location = 0) rayPayloadNV RayPayload prd;

vec3 d(uint x, uint y, vec3 r, vec3 u, vec3 v, vec2 jitter) {
  vec2 p = (vec2(x, y) + jitter) / gl_LaunchSizeNV.xy;
  vec2 c = p * 2.0 - 1.0;
  return v + c.x * r + c.y * u;
}

// void eyeRayDiff(vec3 r, vec3 u, vec3 v, vec2 jitter) {
//   vec2 p = (vec2(gl_LaunchIDNV.xy) + jitter) / gl_LaunchSizeNV.xy;
//   vec2 c = p * 2.0 - 1.0;
//   vec3 d = c.x * r + c.y * u + v;
//   vec3 _r = 2.0 / gl_LaunchSizeNV.x * r;
//   vec3 _u = 2.0 / gl_LaunchSizeNV.y * u;
//   float dd = dot(d, d);
//   float dd_3_2 = pow(dd, 3.0 / 2);
//   prd.rayDiff.dDdx = (dd * _r - dot(d, _r) * d) / dd_3_2;
//   prd.rayDiff.dDdy = (dd * _u - dot(d, _u) * d) / dd_3_2;
//   prd.rayDiff.dOdx = vec3(0);
//   prd.rayDiff.dOdy = vec3(0);
// }

void main() {
  const float a = cam.w / cam.h;
  const float f = tan(cam.fov / 2);
  const vec3 r = cam.zNear * a * f * cam.r.xyz;
  const vec3 u = -f * cam.zNear * normalize(cross(cam.r.xyz, cam.v.xyz));
  const vec3 v = cam.zNear * cam.v.xyz;

  vec3 hitValue = vec3(0);

  RayDesc ray;
  ray.rayFlags = gl_RayFlagsOpaqueNV;
  ray.cullMask = 0xFF;
  ray.tmin = 0;
  ray.tmax = cam.zFar;
  ray.sbtRecordOffset = 0;
  ray.sbtRecordStride = 0; //currently we won't have more than one geometry in each blas
  ray.missIndex = 0;

  //spread angle will not change,i.e. we assume hitting only planar surfaces.
  float spreadAngle = atan(2 * f / cam.h);

  for(int smpl = 0; smpl < nbSamples; ++smpl) {
    vec3 result = vec3(0.f);
    prd.radiance = vec3(0);
    prd.attenuation = vec3(1.f);
    prd.done = 0;
    prd.seed =
      tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, cam.frame + smpl);
    vec2 jitter = smpl == 0 ? vec2(0.5) : rnd2(prd.seed);
    prd.origin = cam.eye.xyz;
    prd.direction = normalize(d(gl_LaunchIDNV.x, gl_LaunchIDNV.y, r, u, v, jitter));

    // ray cone init
    prd.rayCone.width = 0;
    prd.rayCone.spreadAngle = spreadAngle;
    // eyeRayDiff(r, u, v, jitter);

    ray.cullMask = 0xFF;
    ray.origin = prd.origin;
    ray.direction = prd.direction;

    for(int depth = 0; depth < maxDepth; ++depth) {
      trace(tlas, ray, 0);

      result += prd.radiance;

      if(depth == 0) {
        float z;
        if(prd.done == 2) { //miss
          z = 1;
        } else {
          vec4 pos = cam.projView * vec4(prd.origin, 1);
          z = pos.z / pos.w;
        }
        imageStore(depthImg, ivec2(gl_LaunchIDNV.xy), vec4(z, 0, 0, 0.0f));
      }
      ray.cullMask = opaqueMask;

      if(prd.done != 0) break;
      ray.origin = prd.origin;
      ray.direction = prd.direction;
      prd.radiance = vec3(0);
    }
    hitValue += result;
  }

  vec3 hitColor = hitValue / nbSamples;
  imageStore(colorImg, ivec2(gl_LaunchIDNV.xy), vec4(hitColor, 1.f));
}
