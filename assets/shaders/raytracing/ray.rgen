#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "resources.h"
#include "../sampling.h"

layout(location = 0) rayPayloadNV RayTracingRayPayload prd;

vec3 d(uint x, uint y, vec3 r, vec3 u, vec3 v, vec2 jitter) {
  vec2 p = (vec2(x, y) + jitter) / gl_LaunchSizeNV.xy;
  vec2 c = p * 2.0 - 1.0;
  return normalize(v + c.x * r + c.y * u);
}

void main() {
  const vec3 origin = vec3(cam.eye);
  const float a = cam.w / cam.h;
  const float f = tan(cam.fov / 2);
  const vec3 r = cam.zNear * a * f * cam.r.xyz;
  const vec3 u = -f * cam.zNear * normalize(cross(cam.r.xyz, cam.v.xyz));
  const vec3 v = cam.zNear * cam.v.xyz;
  vec3 dir = d(gl_LaunchIDNV.x, gl_LaunchIDNV.y, r, u, v, vec2(0.5));

  const uint rayFlags = gl_RayFlagsOpaqueNV;
  const uint cullMask = 0xFF;
  const float tmin = cam.zNear;
  const float tmax = cam.zFar;

  vec3 hitValue = vec3(0);
  prd.recursion = MAX_RECURSION;
  prd.seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, cam.frame);
  traceNV(Scene, rayFlags, cullMask, 0, 1, 0, origin, tmin, dir, tmax, 0);
  hitValue += prd.color;

  if(prd.hitT < 0) prd.hitT = cam.zFar;
  vec4 pos = cam.projView * vec4(origin + prd.hitT * dir, 1.0);
  imageStore(depthImg, ivec2(gl_LaunchIDNV.xy), vec4(pos.z / pos.w, 0, 0, 0.0f));

  for(int smpl = 1; smpl < NBSamples; ++smpl) {
    prd.seed =
      tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, cam.frame + smpl);
    dir = d(gl_LaunchIDNV.x, gl_LaunchIDNV.y, r, u, v, rnd2(prd.seed));
    prd.recursion = MAX_RECURSION;
    traceNV(Scene, rayFlags, cullMask, 0, 1, 0, origin, tmin, dir, tmax, 0);
    hitValue += prd.color;
  }
  vec3 hitColor = LINEARtoSRGB(hitValue / NBSamples);
  imageStore(colorImg, ivec2(gl_LaunchIDNV.xy), vec4(hitColor, 1.f));
}
