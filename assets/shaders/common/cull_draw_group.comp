#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable
// #extension GL_EXT_debug_printf : enable

#include "../common.h"
layout(constant_id = 0) const uint lx = 1;
layout(constant_id = 1) const uint ly = 1;
layout(constant_id = 2) const uint lz = 1;
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(push_constant) uniform TotalMeshInstances { uint total; };

layout(set = 0, binding = 0) uniform Frustum { vec4 planes[6]; };
layout(set = 0, binding = 1, scalar) readonly buffer MeshesBuffer {
  MeshInstanceUBO meshInstances[];
};
layout(set = 0, binding = 2, scalar) readonly buffer PrimitiveBuffer {
  PrimitiveUBO primitives[];
};
layout(set = 0, binding = 3, std430) readonly buffer TransformBuffer { mat4 matrices[]; };
layout(set = 0, binding = 4, scalar) readonly buffer DrawGroupOffsetBuffer {
  uint drawCMDOffset[];
};
layout(set = 0, binding = 5, scalar) buffer DrawIndirectCMDBuffer {
  VkDrawIndexedIndirectCommand drawCMDs[];
};
layout(set = 0, binding = 6, scalar) buffer DrawCountBuffer { uint drawCMDCount[]; };

bool isInFrustum(vec4 p, float radius) {
  p /= p.w;
  for(int i = 0; i < 6; ++i)
    if(dot(planes[i], p) + radius < 0) return false;
  return true;
}

bool frustumIntersectAABB(AABB aabb) { return false; }

void transformAABB(inout AABB aabb, mat4 m) {
  vec3 _min = vec3(m[3]);
  vec3 _max = _min;

  vec3 p = vec3(m[0]);
  vec3 v0 = p * aabb.min.x;
  vec3 v1 = p * aabb.max.x;
  _min += min(v0, v1);
  _max += max(v0, v1);

  p = vec3(m[1]);
  v0 = p * aabb.min.y;
  v1 = p * aabb.max.y;
  _min += min(v0, v1);
  _max += max(v0, v1);

  p = vec3(m[2]);
  v0 = p * aabb.min.z;
  v1 = p * aabb.max.z;
  _min += min(v0, v1);
  _max += max(v0, v1);

  aabb.min = _min;
  aabb.max = _max;
}

void main() {
  ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);
  uint dx = gl_WorkGroupSize.y * gl_WorkGroupSize.z * ly * lz;
  uint dy = gl_WorkGroupSize.z * lz;
  uint dz = 1;
  uint id = coord.x * dx + coord.y * dy + coord.z * dz;

  if(id >= total) return;

  MeshInstanceUBO mesh = meshInstances[id];

  if(!mesh.visible) return;

  PrimitiveUBO prim = primitives[mesh.primitive];
  AABB aabb = prim.aabb;
  mat4 model = matrices[id];
  transformAABB(aabb, model);
  vec3 center = (aabb.min + aabb.max) / 2;
  float radius = length(aabb.max - aabb.min) / 2;
  if(isInFrustum(vec4(center, 1), 0) || isInFrustum(vec4(center, 1), radius)) {
    VkDrawIndexedIndirectCommand drawCMD;
    drawCMD.firstIndex = prim.index.start;
    drawCMD.indexCount = prim.index.size;
    drawCMD.vertexOffset = int(prim.position.start);
    drawCMD.firstInstance = id;
    drawCMD.instanceCount = 1;

    uint groupID = mesh.drawGroupID;
    uint outIdx = atomicAdd(drawCMDCount[groupID], 1);
    uint offset = drawCMDOffset[groupID];
    drawCMDs[offset + outIdx] = drawCMD;
  }
}