#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable
// #extension GL_EXT_debug_printf : enable

#include "../common.h"
layout(constant_id = 0) const uint lx = 1;
layout(constant_id = 1) const uint ly = 1;
layout(constant_id = 2) const uint lz = 1;
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(push_constant) uniform PushConstant {
  uint totalFrustums;
  uint totalMeshInstances;
  uint cmdFrustumStride;
  uint groupStride;
  uint frame;
};

layout(set = 0, binding = 0, scalar) buffer Frustums { Frustum frustums[]; };
layout(set = 0, binding = 1, scalar) readonly buffer MeshesBuf {
  MeshInstanceDesc meshInstances[];
};
layout(set = 0, binding = 2, scalar) readonly buffer PrimitiveBuf {
  PrimitiveDesc primitives[];
};
layout(set = 0, binding = 3, std430) readonly buffer TransformBuffer { mat4 matrices[]; };
layout(set = 0, binding = 4, scalar) buffer DrawIndirectCMDBuffer {
  VkDrawIndexedIndirectCommand drawCMDs[];
};
layout(set = 0, binding = 5, scalar) readonly buffer DrawGroupOffsetBuffer {
  uint cmdOffsetPerGroup[];
};
layout(set = 0, binding = 6, scalar) buffer DrawCountBuffer { uint drawCMDCount[]; };
layout(set = 0, binding = 7, scalar) buffer AllowedGroupBuf { bool allowedGroup[]; };

void main() {
  uint NX = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  uint NY = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
  uint dispatchId = gl_GlobalInvocationID.z * (NX * NY) + gl_GlobalInvocationID.y * NX +
                    gl_GlobalInvocationID.x;
  uint id = dispatchId % totalMeshInstances;
  uint frustumIdx = dispatchId / totalMeshInstances;
  if(frustumIdx >= totalFrustums) return;
  Frustum frustum = frustums[frustumIdx];

  MeshInstanceDesc mesh = meshInstances[id];

  if(
    !mesh.visible || mesh.shadeModel == ShadingModelUnknown ||
    !allowedGroup[mesh.shadeModel])
    return;

  PrimitiveDesc prim = primitives[frameRef(mesh.primitive, frame)];
  AABB aabb = prim.aabb;
  mat4 model = matrices[id];
  transformAABB(aabb, model);
  vec3 center = (aabb.min + aabb.max) / 2;
  float radius = length(aabb.max - aabb.min) / 2;
  if(
    isInFrustum(frustum, vec4(center, 1), 0) ||
    isInFrustum(frustum, vec4(center, 1), radius)) {
    VkDrawIndexedIndirectCommand drawCMD;
    drawCMD.firstIndex = prim.index.start;
    drawCMD.indexCount = prim.index.size;
    drawCMD.vertexOffset = int(prim.position.start);
    drawCMD.firstInstance = id;
    drawCMD.instanceCount = 1;

    uint shadeModelID = mesh.shadeModel;
    uint shadeModelIdx = atomicAdd(drawCMDCount[frustumIdx * groupStride + shadeModelID], 1);
    uint shadeModelOffset = cmdOffsetPerGroup[shadeModelID];
    uint cmdIdx = frustumIdx * cmdFrustumStride + shadeModelOffset + shadeModelIdx;
    drawCMDs[cmdIdx] = drawCMD;
  }
}