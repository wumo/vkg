#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable
// #extension GL_EXT_debug_printf : enable

#include "../common.h"
layout(constant_id = 0) const uint lx = 1;
layout(constant_id = 1) const uint ly = 1;
layout(constant_id = 2) const uint lz = 1;
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(push_constant) uniform PushConstant {
  uint totalMeshInstances;
  uint frame;
};

layout(set = 0, binding = 0, scalar) buffer MeshesBuffer {
  MeshInstanceDesc meshInstances[];
};
layout(set = 0, binding = 1, scalar) buffer TransformBuffer { Transform transforms[]; };
layout(set = 0, binding = 2, std430) buffer TransformMatrixBuffer { mat4 matrices[]; };

void main() {
  uint NX = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  uint NY = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
  uint id = gl_GlobalInvocationID.z * (NX * NY) + gl_GlobalInvocationID.y * NX +
            gl_GlobalInvocationID.x;

  if(id >= totalMeshInstances) return;

  MeshInstanceDesc mesh = meshInstances[id];
  uint instTransOffset = clamp(frame, 0, mesh.instanceCount - 1);
  mat4 t = toMatrix(transforms[mesh.instance + instTransOffset]) *
           toMatrix(transforms[mesh.node]);
  matrices[id] = t;
}