#version 450
#extension GL_GOOGLE_include_directive : require
#include "atmosphere.h"

layout(push_constant) uniform LRRUniform {
  mat4 luminance_from_radiance;
  int scattering_order;
};
layout(set = 0, binding = 1) uniform sampler3D single_rayleigh_scattering_texture;
layout(set = 0, binding = 2) uniform sampler3D single_mie_scattering_texture;
layout(set = 0, binding = 3) uniform sampler3D multiple_scattering_texture;

layout(set = 0, binding = 4, rgba32f) uniform image2D delta_irradiance;
layout(set = 0, binding = 5, rgba32f) uniform image2D irradiance;

layout(constant_id = 0) const uint lx = 1;
layout(constant_id = 1) const uint ly = 1;
layout(constant_id = 2) const uint lz = 1;
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

void main() {
  ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

  vec3 deltaIrradianceResult = ComputeIndirectIrradianceTexture(
    ATMOSPHERE, single_rayleigh_scattering_texture, single_mie_scattering_texture,
    multiple_scattering_texture, coord + (0.5, 0.5), scattering_order);
  imageStore(delta_irradiance, coord, vec4(deltaIrradianceResult, 0));

  vec3 irradianceResult = mat3(luminance_from_radiance) * deltaIrradianceResult;
  irradianceResult = imageLoad(irradiance, coord).xyz + irradianceResult;
  imageStore(irradiance, coord, vec4(irradianceResult, 0));
}